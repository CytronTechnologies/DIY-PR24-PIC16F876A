
# 1 "D:\DIY\DIY PR24\Source code PR24\PR24.c"

# 53 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic16f84a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char EEDATA @ 0x008;



volatile unsigned char EEADR @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit EEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned EEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;

# 203
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char EECON1 @ 0x088;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEIF @ ((unsigned)&EECON1*8)+4;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned EEIF : 1;
};
} EECON1bits @ 0x088;



volatile unsigned char EECON2 @ 0x089;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 144
extern void flash_erase(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 16 "D:\DIY\DIY PR24\Source code PR24\PR24.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3F32");

# 40
unsigned char kp = 0;
unsigned char ki = 0;
unsigned char kd = 0;

# 49
unsigned char ai_read(unsigned char an_sel);
void motor_right(unsigned char speed);
void motor_left(unsigned char speed);
void motor_stop(void);

void delay(unsigned long data);
void e_pulse(void);
void lcd_clr(void);
void lcd_goto(unsigned char data);
void send_char(unsigned char data);
void send_config(unsigned char data);
void send_string(const char *s);
void send_dec(unsigned long data,unsigned char num_dig);




void main(void)
{
unsigned long rec_data=0;


TRISB = 0b00000001;
TRISC = 0b00000000;
TRISA = 0b11111111;


PORTB = 0;
PORTC = 0;


CCP1CON = 0b00001100;
T2CON = 0b00000101;
PR2 = 0xFF;
CCPR1L = 0;


ADCON1 = 0b01000000;
ADCON0 = 0b00000001;


send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);

lcd_clr();
lcd_goto(0);
send_string("ANGLE=");
lcd_goto(11);
send_string("P=");
lcd_goto(20);
send_string("I=");
lcd_goto(26);
send_string("D=");


while(1)
{
rec_data = (unsigned long)ai_read(0) * 3600 / 255;
lcd_goto(6);
send_dec(rec_data, 4);

kp = ai_read(2);
lcd_goto(13);
send_dec(kp, 3);

ki = ai_read(3);
lcd_goto(22);
send_dec(ki, 3);

kd = ai_read(4);
lcd_goto(28);
send_dec(kd, 3);


if(!RB0)
{
while(!RB0);


TMR1H = 0;
TMR1L = 0;
T1CON = 0b00110001;


TMR1IF=0;
TMR1IE=1;
PEIE=1;
GIE=1;

while(1);
}
}
}



unsigned char ai_read(unsigned char an_sel)
{
if(an_sel == 0) ADCON0 = 0b00000001;
else if(an_sel == 1) ADCON0 = 0b00001001;
else if(an_sel == 2) ADCON0 = 0b00010001;
else if(an_sel == 3) ADCON0 = 0b00011001;
else if(an_sel == 4) ADCON0 = 0b00100001;

delay(100);

GO=1;
while(GO==1);

if(an_sel == 0 || an_sel == 1) return ADRESH;
else return ADRESH * 100 / 255;
}



void motor_right(unsigned char speed)
{
RC1 = 0;
RC0 = 1;
CCPR1L = speed;
}



void motor_left(unsigned char speed)
{
RC1 = 1;
RC0 = 0;
CCPR1L = speed;
}



void motor_stop(void)
{
RC1 = 1;
RC0 = 1;
CCPR1L = 0;
}



void delay(unsigned long data)
{
for( ; data > 0; data -= 1);
}



void e_pulse(void)
{
RB6 = 1;
delay(50);
RB6 = 0;
delay(50);
}



void send_config(unsigned char data)
{
unsigned char test;
unsigned char i;

RB7 = 0;
for(i = 0; i < 8; i++)
{
test = (data >> i) & 0b00000001;
switch(i)
{
case 0:
if(test == 1) RB5 = 1;
else RB5 = 0;
case 1:
if(test == 1) RB4 = 1;
else RB4 = 0;
case 2:
if(test == 1) RB3 = 1;
else RB3 = 0;
case 3:
if(test == 1) RB2 = 1;
else RB2 = 0;
case 4:
if(test == 1) RB1 = 1;
else RB1 = 0;
case 5:
if(test == 1) RC5 = 1;
else RC5 = 0;
case 6:
if(test == 1) RC4 = 1;
else RC4 = 0;
case 7:
if(test == 1) RC3 = 1;
else RC3 = 0;
}
}
delay(50);
e_pulse();
}



void lcd_clr(void)
{
send_config(0x01);
delay(600);
}

# 269
void lcd_goto(unsigned char data)
{
if(data < 16)
{
send_config(0x80 + data);
}
else
{
data = data - 20;
send_config(0xc0 + data);
}
delay(200);
}



void send_char(unsigned char data)
{
unsigned char test;
unsigned char i;
RB7 = 1;
for(i = 0; i < 8; i++)
{
test = (data >> i) & 0b00000001;
switch(i)
{
case 0:
if(test == 1) RB5 = 1;
else RB5 = 0;
case 1:
if(test == 1) RB4 = 1;
else RB4 = 0;
case 2:
if(test == 1) RB3 = 1;
else RB3 = 0;
case 3:
if(test == 1) RB2 = 1;
else RB2 = 0;
case 4:
if(test == 1) RB1 = 1;
else RB1 = 0;
case 5:
if(test == 1) RC5 = 1;
else RC5 = 0;
case 6:
if(test == 1) RC4 = 1;
else RC4 = 0;
case 7:
if(test == 1) RC3 = 1;
else RC3 = 0;
}
}
delay(50);
e_pulse();
}



void send_string(const char *s)
{
unsigned char i = 0;
while (s && *s) send_char (*s++);
delay(300);
}



void send_dec(unsigned long data, unsigned char num_dig)
{
if(num_dig >= 10)
{
data = data % 10000000000;
send_char(data / 1000000000 + 0x30);
}
if(num_dig >= 9)
{
data = data % 1000000000;
send_char(data / 100000000 + 0x30);
}
if(num_dig >= 8)
{
data = data % 100000000;
send_char(data / 10000000 + 0x30);
}
if(num_dig >= 7)
{
data = data % 10000000;
send_char(data / 1000000 + 0x30);
}
if(num_dig >= 6)
{
data = data % 1000000;
send_char(data / 100000 + 0x30);
}
if(num_dig >= 5)
{
data = data % 100000;
send_char(data / 10000 + 0x30);
}
if(num_dig >= 4)
{
data = data % 10000;
send_char(data / 1000 + 0x30);
}
if(num_dig >= 3)
{
data = data % 1000;
send_char(data / 100 + 0x30);
}
if(num_dig >= 2)
{
data=data % 100;
send_char(data / 10 + 0x30);
}
if(num_dig >= 1)
{
data = data % 10;
send_char(data + 0x30);
}
}




static void interrupt isr(void)
{
signed int set_value = 0;
signed int feedback_value = 0;
signed long error_value = 0;
static signed long pre_error = 0;
static signed long integral = 0;
signed long derivative = 0;
signed long output = 0;
signed int motor_direction = 0;


unsigned char pwm_value=0;

if(TMR1IF == 1)
{
TMR1IF = 0;

feedback_value = ai_read(1);
set_value = ai_read(0);

error_value = set_value - feedback_value;
integral = integral + error_value;
derivative = error_value - pre_error;

output = (kp * error_value) + (ki * integral) + (kd * derivative);

if (output > 255) output = 255;
else if (output < -255) output = -255;

if (output > 0) motor_right((unsigned char)output);
else if (output < 0) motor_left((unsigned char)(-output));
else motor_stop();

pre_error = error_value;
}
}

